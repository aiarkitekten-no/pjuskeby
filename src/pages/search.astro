---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Search in Pjuskeby">
  <div class="search-container">
    <div class="search-header">
      <h1>üîç Search Pjuskeby</h1>
      <p>Find stories, people, places and more from our small, absurd world</p>
    </div>

    <div class="search-form">
      <div class="search-input-container">
        <input
          type="text"
          id="searchInput"
          class="search-input"
          placeholder="Search for stories, people, places..."
          autocomplete="off"
        >
        <div class="search-suggestions" id="suggestions" style="display: none;"></div>
      </div>

      <div class="search-filters">
        <label class="filter-label">
          <input type="radio" name="type" value="" checked> All
        </label>
        <label class="filter-label">
          <input type="radio" name="type" value="story"> Stories
        </label>
        <label class="filter-label">
          <input type="radio" name="type" value="person"> People
        </label>
        <label class="filter-label">
          <input type="radio" name="type" value="place"> Places
        </label>
        <label class="filter-label">
          <input type="radio" name="type" value="business"> Businesses
        </label>
        <label class="filter-label">
          <input type="radio" name="type" value="street"> Streets
        </label>
      </div>

      <div class="search-options">
        <label class="option-label">
          <input type="checkbox" id="fuzzySearch" checked> Fuzzy search (find similar words)
        </label>
      </div>
    </div>

    <div class="search-results" id="searchResults" style="display: none;">
      <div class="results-header">
        <h2 id="resultsTitle">Search Results</h2>
        <div class="results-count" id="resultsCount"></div>
      </div>
      <div class="results-list" id="resultsList"></div>
    </div>

    <div class="search-help" id="searchHelp">
      <h2>üí° Search Tips</h2>
      <div class="help-grid">
        <div class="help-item">
          <h3>üéØ Exact searches</h3>
          <p>Search for "Agatha" to find all stories about the main character</p>
        </div>
        <div class="help-item">
          <h3>üèÉ‚Äç‚ôÄÔ∏è Fuzzy search</h3>
          <p>Type "Pjukeby" and get results for "Pjuskeby" (finds typos)</p>
        </div>
        <div class="help-item">
          <h3>üìñ Categories</h3>
          <p>Filter by stories, people, or places for more precise results</p>
        </div>
        <div class="help-item">
          <h3>‚ö° Autocomplete</h3>
          <p>Start typing to get search suggestions</p>
        </div>
      </div>
      
      <div class="popular-searches">
        <h3>üî• Popular Searches</h3>
        <div class="popular-tags">
          <button class="popular-tag" data-search="Agatha">Agatha</button>
          <button class="popular-tag" data-search="diary">Agatha's Diary</button>
          <button class="popular-tag" data-search="rumors">Rumors</button>
          <button class="popular-tag" data-search="Babblespray Falls">Babblespray Falls</button>
          <button class="popular-tag" data-search="Milly">Milly Wiggleflap</button>
          <button class="popular-tag" data-search="events">Events</button>
        </div>
      </div>
    </div>

    <div class="loading" id="loading" style="display: none;">
      <div class="spinner"></div>
      <p>Searching...</p>
    </div>
  </div>
</BaseLayout>

<style>
  .search-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .search-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .search-header h1 {
    font-size: 2.5rem;
    margin: 0 0 0.5rem 0;
    font-weight: 800;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .search-header p {
    font-size: 1.1rem;
    color: #64748b;
    margin: 0;
  }

  .search-form {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    margin-bottom: 2rem;
    border: 2px solid #e2e8f0;
  }

  .search-input-container {
    position: relative;
    margin-bottom: 1.5rem;
  }

  .search-input {
    width: 100%;
    padding: 1rem 1.25rem;
    font-size: 1.1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    outline: none;
    transition: all 0.3s ease;
    background: #f8fafc;
  }

  .search-input:focus {
    border-color: #667eea;
    background: white;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .search-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 2px solid #e2e8f0;
    border-top: none;
    border-radius: 0 0 8px 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    max-height: 200px;
    overflow-y: auto;
  }

  .suggestion-item {
    padding: 0.75rem 1.25rem;
    cursor: pointer;
    border-bottom: 1px solid #f1f5f9;
    transition: background 0.2s ease;
  }

  .suggestion-item:hover,
  .suggestion-item.selected {
    background: #f8fafc;
  }

  .suggestion-item:last-child {
    border-bottom: none;
  }

  .search-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .filter-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    transition: all 0.3s ease;
    background: #f8fafc;
  }

  .filter-label:hover {
    background: #e2e8f0;
  }

  .filter-label:has(input:checked) {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-color: #667eea;
  }

  .filter-label input[type="radio"] {
    margin: 0;
  }

  .search-options {
    border-top: 1px solid #e2e8f0;
    padding-top: 1rem;
  }

  .option-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: #64748b;
    cursor: pointer;
  }

  .search-results {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 2px solid #e2e8f0;
  }

  .results-header {
    padding: 1.5rem 2rem;
    border-bottom: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .results-header h2 {
    font-size: 1.5rem;
    margin: 0;
    color: #1e293b;
  }

  .results-count {
    font-size: 0.9rem;
    color: #64748b;
    font-weight: 500;
  }

  .results-list {
    padding: 0;
  }

  .result-item {
    padding: 1.5rem 2rem;
    border-bottom: 1px solid #f1f5f9;
    transition: background 0.2s ease;
  }

  .result-item:hover {
    background: #f8fafc;
  }

  .result-item:last-child {
    border-bottom: none;
  }

  .result-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.5rem;
  }

  .result-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1e293b;
    text-decoration: none;
    margin-bottom: 0.25rem;
  }

  .result-title:hover {
    color: #667eea;
    text-decoration: underline;
  }

  .result-type {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .result-description {
    color: #475569;
    line-height: 1.6;
    margin-bottom: 0.5rem;
  }

  .result-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    font-size: 0.9rem;
    color: #64748b;
  }

  .result-meta-item {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .result-score {
    font-weight: 600;
    color: #22c55e;
  }

  mark {
    background: #fef3c7;
    color: #92400e;
    padding: 0.1rem 0.2rem;
    border-radius: 2px;
    font-weight: 600;
  }

  .search-help {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 2px solid #e2e8f0;
  }

  .search-help h2 {
    font-size: 1.5rem;
    margin: 0 0 1.5rem 0;
    color: #1e293b;
  }

  .help-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .help-item {
    padding: 1rem;
    background: #f8fafc;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }

  .help-item h3 {
    font-size: 1rem;
    margin: 0 0 0.5rem 0;
    color: #1e293b;
  }

  .help-item p {
    font-size: 0.9rem;
    color: #64748b;
    margin: 0;
    line-height: 1.5;
  }

  .popular-searches h3 {
    font-size: 1.1rem;
    margin: 0 0 1rem 0;
    color: #1e293b;
  }

  .popular-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .popular-tag {
    background: #f1f5f9;
    border: 1px solid #cbd5e1;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    color: #475569;
    transition: all 0.2s ease;
  }

  .popular-tag:hover {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-color: #667eea;
  }

  .loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    color: #64748b;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e2e8f0;
    border-top: 4px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @media (max-width: 768px) {
    .search-container {
      padding: 1rem;
    }

    .search-header h1 {
      font-size: 2rem;
    }

    .search-form {
      padding: 1.5rem;
    }

    .search-filters {
      flex-direction: column;
    }

    .filter-label {
      justify-content: center;
    }

    .results-header {
      padding: 1rem;
      flex-direction: column;
      align-items: stretch;
      gap: 0.5rem;
    }

    .result-item {
      padding: 1rem;
    }

    .result-header {
      flex-direction: column;
      gap: 0.5rem;
    }

    .help-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script is:inline>
  // Search functionality with fuzzy search and debouncing
  class PjuskebySearch {
    constructor() {
      this.searchInput = document.getElementById('searchInput');
      this.suggestionsContainer = document.getElementById('suggestions');
      this.searchResults = document.getElementById('searchResults');
      this.resultsList = document.getElementById('resultsList');
      this.resultsTitle = document.getElementById('resultsTitle');
      this.resultsCount = document.getElementById('resultsCount');
      this.searchHelp = document.getElementById('searchHelp');
      this.loading = document.getElementById('loading');
      this.fuzzyCheckbox = document.getElementById('fuzzySearch');
      
      this.debounceTimer = null;
      this.suggestionDebouncer = null;
      this.currentQuery = '';
      this.selectedSuggestion = -1;

      this.init();
    }

    init() {
      // Search input with debouncing
      this.searchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();
        
        // Clear previous timers
        clearTimeout(this.debounceTimer);
        clearTimeout(this.suggestionDebouncer);
        
        if (query.length >= 2) {
          // Autocomplete suggestions (faster)
          this.suggestionDebouncer = setTimeout(() => {
            this.fetchSuggestions(query);
          }, 150);
          
          // Main search (slower)
          this.debounceTimer = setTimeout(() => {
            this.performSearch(query);
          }, 300);
        } else {
          this.hideSuggestions();
          this.hideResults();
        }
      });

      // Keyboard navigation for suggestions
      this.searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          this.navigateSuggestions(1);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault(); 
          this.navigateSuggestions(-1);
        } else if (e.key === 'Enter') {
          e.preventDefault();
          this.selectCurrentSuggestion();
        } else if (e.key === 'Escape') {
          this.hideSuggestions();
        }
      });

      // Hide suggestions when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.searchInput.contains(e.target) && !this.suggestionsContainer.contains(e.target)) {
          this.hideSuggestions();
        }
      });

      // Filter change handlers
      document.querySelectorAll('input[name="type"]').forEach(radio => {
        radio.addEventListener('change', () => {
          if (this.currentQuery) {
            this.performSearch(this.currentQuery);
          }
        });
      });

      // Fuzzy search toggle
      this.fuzzyCheckbox.addEventListener('change', () => {
        if (this.currentQuery) {
          this.performSearch(this.currentQuery);
        }
      });

      // Popular tag handlers
      document.querySelectorAll('.popular-tag').forEach(tag => {
        tag.addEventListener('click', (e) => {
          const searchTerm = e.target.dataset.search;
          this.searchInput.value = searchTerm;
          this.performSearch(searchTerm);
        });
      });
    }

    async fetchSuggestions(query) {
      try {
        const response = await fetch(`/api/suggest?q=${encodeURIComponent(query)}&limit=5`);
        const data = await response.json();
        
        if (data.suggestions && data.suggestions.length > 0) {
          this.showSuggestions(data.suggestions);
        } else {
          this.hideSuggestions();
        }
      } catch (error) {
        console.error('Suggestion error:', error);
        this.hideSuggestions();
      }
    }

    showSuggestions(suggestions) {
      this.suggestionsContainer.innerHTML = '';
      
      suggestions.forEach((suggestion, index) => {
        const item = document.createElement('div');
        item.className = 'suggestion-item';
        item.textContent = suggestion;
        item.addEventListener('click', () => {
          this.searchInput.value = suggestion;
          this.performSearch(suggestion);
          this.hideSuggestions();
        });
        this.suggestionsContainer.appendChild(item);
      });
      
      this.suggestionsContainer.style.display = 'block';
      this.selectedSuggestion = -1;
    }

    hideSuggestions() {
      this.suggestionsContainer.style.display = 'none';
      this.selectedSuggestion = -1;
    }

    navigateSuggestions(direction) {
      const suggestions = this.suggestionsContainer.querySelectorAll('.suggestion-item');
      if (suggestions.length === 0) return;

      // Remove current selection
      suggestions[this.selectedSuggestion]?.classList.remove('selected');
      
      // Update selection
      this.selectedSuggestion += direction;
      if (this.selectedSuggestion < -1) this.selectedSuggestion = suggestions.length - 1;
      if (this.selectedSuggestion >= suggestions.length) this.selectedSuggestion = -1;
      
      // Apply new selection
      if (this.selectedSuggestion >= 0) {
        suggestions[this.selectedSuggestion].classList.add('selected');
        this.searchInput.value = suggestions[this.selectedSuggestion].textContent;
      }
    }

    selectCurrentSuggestion() {
      if (this.selectedSuggestion >= 0) {
        const suggestions = this.suggestionsContainer.querySelectorAll('.suggestion-item');
        const selectedText = suggestions[this.selectedSuggestion].textContent;
        this.searchInput.value = selectedText;
        this.performSearch(selectedText);
      } else if (this.searchInput.value.trim()) {
        this.performSearch(this.searchInput.value.trim());
      }
      this.hideSuggestions();
    }

    async performSearch(query) {
      if (!query || query.length < 2) return;
      
      this.currentQuery = query;
      this.showLoading();
      this.hideSuggestions();
      
      try {
        // Get selected type
        const typeRadio = document.querySelector('input[name="type"]:checked');
        const type = typeRadio ? typeRadio.value : '';
        
        // Get fuzzy option
        const fuzzy = this.fuzzyCheckbox.checked;
        
        // Build search URL
        const params = new URLSearchParams({
          q: query,
          fuzzy: fuzzy.toString(),
          limit: '20'
        });
        
        if (type) {
          params.set('type', type);
        }

        const response = await fetch(`/api/search?${params}`);
        const data = await response.json();
        
        this.displayResults(data);
        
      } catch (error) {
        console.error('Search error:', error);
        this.showError('Search failed. Please try again later.');
      } finally {
        this.hideLoading();
      }
    }

    displayResults(data) {
      this.hideHelp();
      
      if (!data.results || data.results.length === 0) {
        this.showNoResults(data.query);
        return;
      }

      this.resultsTitle.textContent = `Search results for "${data.query}"`;
      this.resultsCount.textContent = `${data.results.length} result${data.results.length !== 1 ? 's' : ''}`;
      
      this.resultsList.innerHTML = '';
      
      data.results.forEach(result => {
        const item = this.createResultItem(result);
        this.resultsList.appendChild(item);
      });
      
      this.searchResults.style.display = 'block';
    }

    createResultItem(result) {
      const item = document.createElement('div');
      item.className = 'result-item';
      
      const typeLabels = {
        story: 'Story',
        person: 'Person', 
        place: 'Place',
        business: 'Business',
        street: 'Street',
        event: 'Event',
        rumor: 'Rumor'
      };
      
      const typeEmojis = {
        story: 'üìñ',
        person: 'üë§',
        place: 'üìç',
        business: 'üè¢', 
        street: 'üõ£Ô∏è',
        event: 'üéâ',
        rumor: 'üëÅÔ∏è'
      };

      item.innerHTML = `
        <div class="result-header">
          <a href="${result.url}" class="result-title">
            ${result.highlightedTitle || result.title}
          </a>
          <div class="result-type">
            ${typeEmojis[result.type] || 'üìÑ'} ${typeLabels[result.type] || result.type}
          </div>
        </div>
        <div class="result-description">
          ${result.matchedText || result.description}
        </div>
        <div class="result-meta">
          ${result.category ? `<div class="result-meta-item">üìÇ ${result.category}</div>` : ''}
          ${result.characters && result.characters.length > 0 ? 
            `<div class="result-meta-item">üë• ${result.characters.join(', ')}</div>` : ''}
          ${result.locations && result.locations.length > 0 ? 
            `<div class="result-meta-item">üìç ${result.locations.join(', ')}</div>` : ''}
          <div class="result-meta-item">
            üéØ Score: <span class="result-score">${result.score}</span>
          </div>
        </div>
      `;

      return item;
    }

    showNoResults(query) {
      this.resultsTitle.textContent = `No results for "${query}"`;
      this.resultsCount.textContent = '0 results';
      
      this.resultsList.innerHTML = `
        <div class="result-item">
          <div class="result-title">ü§î No matches found</div>
          <div class="result-description">
            Try to:
            <ul style="margin: 0.5rem 0; padding-left: 1.5rem;">
              <li>Check the spelling</li>
              <li>Use different search terms</li>
              <li>Turn on fuzzy search</li>
              <li>Try a broader category</li>
            </ul>
          </div>
        </div>
      `;
      
      this.searchResults.style.display = 'block';
    }

    showError(message) {
      this.hideHelp();
      this.resultsTitle.textContent = 'Search Error';
      this.resultsCount.textContent = '';
      
      this.resultsList.innerHTML = `
        <div class="result-item">
          <div class="result-title">‚ùå ${message}</div>
        </div>
      `;
      
      this.searchResults.style.display = 'block';
    }

    showLoading() {
      this.loading.style.display = 'flex';
    }

    hideLoading() {
      this.loading.style.display = 'none';
    }

    hideResults() {
      this.searchResults.style.display = 'none';
      this.showHelp();
    }

    hideHelp() {
      this.searchHelp.style.display = 'none';
    }

    showHelp() {
      this.searchHelp.style.display = 'block';
    }
  }

  // Initialize search when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new PjuskebySearch();
    console.log('üîç Pjuskeby Search initialized');
  });
</script>